#!/bin/bash

###
### functions
###

#unset clear_variables
function clear_variables() {
    var_prefix=$1

    if [ -z "$var_prefix" ]; then
        var_prefix="ipsec_ tunnel1_ tunnel2_"
    fi

    for prefix in $var_prefix; do
        for var in $(comm -3 <(comm -3 <(declare | sort) <(declare -f | sort)) <(env | sort) | grep "^$prefix" | cut -d= -f1); do
            unset $var
        done
    done
}

#unset get_tunnel_def
function get_tunnel_def() {

    required_envs="ipsec_name ipsec_aws_openswan_cfg ipsec_aws_generic_cfg ipsec_id ipsec_leftsubnet_route ipsec_rightsubnet_route"
    for required in $required_envs; do
        if [[ ! -v $required ]]; then
            echo "Error. Cause: required variable not set: $required"
            echo "Before starting function, define value for each of required parameters: $required_envs"
            return 1
        fi
    done

    if [ -z "$ipsec_leftsubnet_pass" ]; then
        echo ipsec_leftsubnet_pass=$ipsec_leftsubnet_route
    fi
    if [ -z "$ipsec_rightsubnet_pass" ]; then
        echo ipsec_rightsubnet_pass=$ipsec_rightsubnet_route
    fi

    echo tunnel1_conn=$(echo $ipsec_name)_tunnel1
    echo tunnel1_mark=$(($ipsec_id + 1))/0xffffffff
    echo tunnel1_vti_interface=vti$(($ipsec_id + 1))
    echo tunnel1_vti_routing=no

    echo tunnel2_conn=$(echo $ipsec_name)_tunnel2
    echo tunnel2_mark=$(($ipsec_id + 2))/0xffffffff
    echo tunnel2_vti_interface=vti$(($ipsec_id + 2))
    echo tunnel2_vti_routing=no
}

#unset get_aws_openswan_def
function get_aws_openswan_def() {
    aws_vpn_def_file=$1
    tunnelId=$2

    cat /etc/ipsec.d/partners/$aws_vpn_def_file |
        #take only tunel X definition lines
        sed -n "/^conn Tunnel$tunnelId/,/Create a new file at/p" |
        #remove header and footer
        grep -v 'Create a new file at' | grep -v Tunnel$tunnelId |
        #remove tabs and empty lines
        tr -d '\t' | egrep -v '^ $' |
        # wrap values in quotation marks
        sed 's/=/="/g; s/$/"/g' |
        #prefix with tunnel
        sed -e "s/^/tunnel$tunnelId\\_/"
}

#unset get_aws_generic_def
function get_aws_generic_def() {
    aws_vpn_def_file=$1
    tunnelId=$2

    echo -n "ipsec_tunnel$tunnelId"
    echo -n "_rightvti_address="
    cat /etc/ipsec.d/partners/$aws_vpn_def_file |
        sed -n "/IPSec Tunnel #$tunnelId/,/IPSec Tunnel #$(($tunnelId + 1))/p" |
        grep "Next hop" | tr -d ' ' | cut -d ':' -f2

}

###
###
###

#unset prepare_tunnel_cfg
function prepare_tunnel_cfg() {
    partner_name=$1

    if [ -z "$partner_name" ]; then
        echo "Usage: prepare_tunnel_cfg partner_name"
        return 1
    fi

    # read partner parameters
    if [ ! -f /etc/ipsec.d/partners/$partner_name.cfg ]; then
        echo "Error. Partner definition file not found. Expected at: /etc/ipsec.d/partners/$partner_name.cfg"
        return 2
    fi
    eval $(cat /etc/ipsec.d/partners/$partner_name.cfg)

    #TODO fix hard coded if name
    ipaddress=$(ip address show ens3 | grep inet | tr -s ' ' | cut -d' ' -f3 | cut -d'/' -f1 | head -1)

    ### prepare main cfg file
    eval $(get_tunnel_def)

    ### get params
    case $ipsec_description in
    "aws_vpn")
        echo "Configuration format: $ipsec_description"

        eval $(get_aws_openswan_def $ipsec_aws_openswan_cfg 1) #18 lines
        eval $(get_aws_openswan_def $ipsec_aws_openswan_cfg 2) #18 lines

        eval $(get_aws_generic_def $ipsec_aws_generic_cfg 1) #1 line
        eval $(get_aws_generic_def $ipsec_aws_generic_cfg 2) #1 line
        ;;
    *)
        echo "Error. Unknown configuration format: $ipsec_description"
        return 1
        ;;
    esac

    # check
    echo -n "Checking variables tunnel1..."
    test $(set | grep '^tunnel1' | wc -l) -eq 22 && echo OK || echo ERROR
    echo -n "Checking variables tunnel2..."
    test $(set | grep '^tunnel2' | wc -l) -eq 22 && echo OK || echo ERROR

    ### get secrets
    tunnel1_secret=$(cat /etc/ipsec.d/partners/$ipsec_aws_openswan_cfg | grep "^$tunnel1_leftid $tunnel1_right" | cut -d' ' -f4 | tr -d '"')
    tunnel2_secret=$(cat /etc/ipsec.d/partners/$ipsec_aws_openswan_cfg | grep "^$tunnel2_leftid $tunnel2_right" | cut -d' ' -f4 | tr -d '"')

    # check
    echo -n "Checking secret tunnel1..."
    test $(echo $tunnel1_secret | wc -c) -gt 1 && echo OK || echo ERROR
    echo -n "Checking secret tunnel2..."
    test $(echo $tunnel2_secret | wc -c) -gt 1 && echo OK || echo ERROR

    # final check
    echo -n "Checking variables & secrets..."
    [ $(comm -3 <(comm -3 <(declare | sort) <(declare -f | sort)) <(env | sort) | grep "^tunnel1_" | wc -l) -eq 23 ] &&
        [ $(comm -3 <(comm -3 <(declare | sort) <(declare -f | sort)) <(env | sort) | grep "^tunnel2_" | wc -l) -eq 23 ] && echo OK || echo ERROR
}

#unset get_partner_configuration
function get_partner_configuration() {
    partner_name=$1

    if [ -z "$partner_name" ]; then
        echo "Usage: get_partner_configuration partner_name"
        return 1
    fi

    prepare_tunnel_cfg $1 >/dev/null

    clear_variables
}

###
### Generate libreswan cfg files
###

#unset generate_libreswan_cfg
function generate_libreswan_cfg() {

    echo -n "Generating tunnel & secrets..."

    cat >/etc/ipsec.d/$ipsec_name.secrets <<EOF
$tunnel1_leftid $tunnel1_right : PSK "$tunnel1_secret"
$tunnel2_leftid $tunnel2_right : PSK "$tunnel2_secret"
EOF

    cat >/etc/ipsec.d/$tunnel1_conn.conf <<EOF
conn $tunnel1_conn
     mark=$tunnel1_mark
     vti-interface=$tunnel1_vti_interface
     vti-routing=$tunnel1_vti_routing

     left=$ipaddress
     leftid=$tunnel1_leftid
     leftsubnet=$ipsec_leftsubnet_pass

     rightsubnet=$ipsec_rightsubnet_pass
     right=$tunnel1_right

     type=$tunnel1_type

     authby=$tunnel1_authby
     auto=$ipsec_tunnel1_auto

     dpddelay=$tunnel1_dpddelay
     dpdtimeout=$tunnel1_dpdtimeout
     dpdaction=$tunnel1_dpdaction

     ikelifetime=$tunnel1_ikelifetime
     keylife=$tunnel1_keylife
     phase2alg=$tunnel1_phase2alg
     ike=$tunnel1_ike
     keyingtries=$tunnel1_keyingtries
     keyexchange=$tunnel1_keyexchange
EOF

    cat >/etc/ipsec.d/$tunnel2_conn.conf <<EOF
conn $tunnel2_conn
     mark=$tunnel2_mark
     vti-interface=$tunnel2_vti_interface
     vti-routing=$tunnel2_vti_routing

     left=$ipaddress
     leftid=$tunnel2_leftid
     leftsubnet=$ipsec_leftsubnet_pass

     rightsubnet=$ipsec_rightsubnet_pass
     right=$tunnel2_right

     type=$tunnel2_type

     authby=$tunnel2_authby
     auto=$ipsec_tunnel2_auto

     dpddelay=$tunnel2_dpddelay
     dpdtimeout=$tunnel2_dpdtimeout
     dpdaction=$tunnel2_dpdaction

     ikelifetime=$tunnel2_ikelifetime
     keylife=$tunnel2_keylife
     phase2alg=$tunnel2_phase2alg
     ike=$tunnel2_ike
     keyingtries=$tunnel2_keyingtries
     keyexchange=$tunnel2_keyexchange
EOF

    chmod 400 /etc/ipsec.d/$ipsec_name.secrets
    chmod 400 /etc/ipsec.d/$tunnel2_conn.conf
    chmod 400 /etc/ipsec.d/$tunnel1_conn.conf
    echo OK
}

###
### Generate libreswan updown script
###

#unset generate_libreswan_updown
function generate_libreswan_updown() {

    echo -n "Generating pluto_updown..."

    if [ -f /etc/sysconfig/pluto_updown ]; then
        # TODO add backup function
        mv -f /etc/sysconfig/pluto_updown /etc/sysconfig/pluto_updown.old
    fi

    # TODO fix get_aws_generic_def to generic handler
    cat >/etc/sysconfig/pluto_updown <<EOF

function get_aws_generic_def() {
    aws_vpn_def_file=\$1
    tunnelId=\$2

    echo -n "ipsec_tunnel\$tunnelId"; echo -n "_rightvti_address="
    cat /etc/ipsec.d/partners/\$aws_vpn_def_file |
        sed -n "/IPSec Tunnel #\$tunnelId/,/IPSec Tunnel #\$((\$tunnelId + 1))/p" |
        grep "Next hop" | tr -d ' ' | cut -d ':' -f2

}

echo '======================='  >>/var/log/ipsec_partner.log
echo 'ipsec start'  >>/var/log/ipsec_partner.log
date >>/var/log/ipsec_partner.log
echo '======================='  >>/var/log/ipsec_partner.log

PARTNER_NAME=\$(echo \$PLUTO_CONNECTION | cut -f1 -d'_')
ACTIVE_TUNNEL=\$(echo \$PLUTO_CONNECTION | cut -f2 -d'_' | sed 's/tunnel//')

eval \$(cat /etc/ipsec.d/partners/\$PARTNER_NAME.cfg)
eval \$(get_aws_generic_def \$PARTNER_NAME-aws-vpn-generic.cfg \$ACTIVE_TUNNEL)

set >>/var/log/ipsec_partner.log

echo '======================='  >>/var/log/ipsec_partner.log
echo \$PLUTO_VERB >>/var/log/ipsec_partner.log
echo '======================='  >>/var/log/ipsec_partner.log

case \$PLUTO_VERB in
  "route-client" | "up-client") 

    if [ \$ACTIVE_TUNNEL -eq 1 ]; then
      if [ ! -z \$ipsec_tunnel1_rightvti_address ]; then
        ip route add \$ipsec_tunnel1_rightvti_address/32 dev \$VTI_IFACE
      fi
    else
      if [ ! -z \$ipsec_tunnel2_rightvti_address ]; then
        ip route add \$ipsec_tunnel2_rightvti_address/32 dev \$VTI_IFACE
      fi
    fi

    if [ ! -z \$ipsec_rightsubnet_route ]; then
        ip route add \$ipsec_rightsubnet_route nexthop dev \$VTI_IFACE
    fi

    ;;
  "unroute-client" | "down-client") 
    if [ \$ACTIVE_TUNNEL -eq 1 ]; then
      if [ ! -z \$ipsec_tunnel1_rightvti_address ]; then
        ip route delete \$ipsec_tunnel1_rightvti_address/32 dev \$VTI_IFACE
      fi
    else
      if [ ! -z \$ipsec_tunnel2_rightvti_address ]; then
        ip route delete \$ipsec_tunnel2_rightvti_address/32 dev \$VTI_IFACE
      fi
    fi

    if [ ! -z \$ipsec_rightsubnet_route ]; then
        ip route delete \$ipsec_rightsubnet_route nexthop dev \$VTI_IFACE
    fi
    ;;
   *)   
    echo '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'  >>/var/log/ipsec_partner.log
    echo "Not recognized action: \$PLUTO_VERB"  >>/var/log/ipsec_partner.log
    echo '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'  >>/var/log/ipsec_partner.log
    ;;
esac
echo '======================='  >>/var/log/ipsec_partner.log
echo 'Done.'  >>/var/log/ipsec_partner.log
echo '======================='  >>/var/log/ipsec_partner.log
EOF
    chmod 400 /etc/sysconfig/pluto_updown
    echo "OK"
}

#unset ipsec_configure
function ipsec_configure() {
    echo -n "Preparing directory to keep partner link configurations..."
    [ ! -d /etc/ipsec.d/partners ] && mkdir /etc/ipsec.d/partners
    chmod 400 /etc/ipsec.d/partners
    echo "OK"

    echo -n "Extending bashrc to register ipsec-partner for each session..."

    grep 'ipsec-partner start' /etc/bashrc >/dev/null
    if [ $? -eq 0 ]; then
        echo "Skipped. Change already done."
    else
        cat >>/etc/bashrc <<EOF
#
# ipsec-partner start
#
if [ "\$PS1" ]; then
    if [ \$(whoami) = 'root' ]; then
    chmod 555 /usr/sbin/ipsec-partner
    . /usr/sbin/ipsec-partner
    echo Root can call ipsec-partner functions directly.
    else
    echo Invoke ipsec-partner function via sudo. 
    echo sudo ipsec-partner ipsec_test_partner LinkA
    fi
fi
#
# ipsec-partner stop
#
EOF
        echo "OK"
    fi

    generate_libreswan_updown
}

#unset ipsec_configure_partner
function ipsec_configure_partner() {
    partner_name=$1

    if [ -z "$partner_name" ]; then
        echo "Usage: ipsec_configure_partner partner_name"
        return 1
    fi

    umask 077

    clear_variables

    prepare_tunnel_cfg $partner_name
    if [ $? -gt 0 ]; then
        return 1
    fi

    prepare_tunnel_cfg $partner_name | grep ERROR >/dev/null
    if [ $? ]; then
        generate_libreswan_cfg
        echo "Done."
    else
        echo "Error! Fix problems before continuing."
    fi

    clear_variables
}

#
# TODO Check if ipsec_id is not used by other partner link
# TODO Check if vti ip subnet is not used by other partner link
# TODO Check if right side netowrk is not overlaping with ther partner link
#
#unset configure_partner
function configure_partner() {
    partner_name=$1
    shift

    if [ -z "$partner_name" ]; then
        echo "Usage: configure_partner partner_name"
        return 1
    fi

    clear_variables ipsec_

    for var in $@; do
        eval $(echo $var)
    done

    [ -z "$install_home" ] && install_home="."

    umask 077

    echo -n "Generating partner configuration..."

    echo "ipsec_name=$partner_name" >/etc/ipsec.d/partners/$partner_name.cfg
    echo "ipsec_id=$ipsec_id" >>/etc/ipsec.d/partners/$partner_name.cfg

    echo "ipsec_tunnel1_auto=$ipsec_tunnel1_auto" >>/etc/ipsec.d/partners/$partner_name.cfg
    echo "ipsec_tunnel2_auto=$ipsec_tunnel2_auto" >>/etc/ipsec.d/partners/$partner_name.cfg

    echo "ipsec_leftsubnet_route=$ipsec_leftsubnet_route" >>/etc/ipsec.d/partners/$partner_name.cfg
    echo "ipsec_rightsubnet_route=$ipsec_rightsubnet_route" >>/etc/ipsec.d/partners/$partner_name.cfg

    if [ ! -z "$ipsec_rightsubnet_pass" ]; then
        echo "ipsec_rightsubnet_pass=$ipsec_rightsubnet_pass" >>/etc/ipsec.d/partners/$partner_name.cfg
    fi

    if [ ! -z "$ipsec_fw_zone" ]; then
        echo "ipsec_fw_zone=$ipsec_fw_zone" >>/etc/ipsec.d/partners/$partner_name.cfg
    fi

    if [ ! -z "$ipsec_rightsubnet_knowntcp" ]; then
        echo "ipsec_rightsubnet_knowntcp=$ipsec_rightsubnet_knowntcp" >>/etc/ipsec.d/partners/$partner_name.cfg
    fi

    case $ipsec_description in
    "aws_vpn")
        echo "Configuration format: $ipsec_description"

        if [ ! -f $install_home/$partner_name-aws-vpn-openswan.cfg ] ||
            [ ! -f $install_home/$partner_name-aws-vpn-generic.cfg ]; then

            echo "Error. Missing mandatory AWS VPN ipsec description files. Cannot continue."
            echo ""
            echo "Download from VPN Connect link description in two formats: openswan, generic, and store in files:"
            echo "a) openswan: $install_home/$partner_name-aws-vpn-openswan.cfg"
            echo "b) generic: $install_home/$partner_name-aws-vpn-generic.cfg"
            echo
            echo "Install script will copy files to /etc/ipsec.d/partners"
            return 1
        fi

        echo -n "Copying AWS ipsec definition files to /etc/ipsec.d/partners..."
        cp $install_home/$partner_name-aws-vpn-openswan.cfg /etc/ipsec.d/partners/$partner_name-aws-vpn-openswan.cfg
        cp $install_home/$partner_name-aws-vpn-generic.cfg /etc/ipsec.d/partners/$partner_name-aws-vpn-generic.cfg
        echo "OK"

        echo "" >>/etc/ipsec.d/partners/$partner_name.cfg
        echo "ipsec_description=$ipsec_description" >>/etc/ipsec.d/partners/$partner_name.cfg
        echo "ipsec_aws_openswan_cfg=$partner_name-aws-vpn-openswan.cfg" >>/etc/ipsec.d/partners/$partner_name.cfg
        echo "ipsec_aws_generic_cfg=$partner_name-aws-vpn-generic.cfg" >>/etc/ipsec.d/partners/$partner_name.cfg
        ;;
    *)
        echo "Error. Unknown configuration format: $ipsec_description"
        return 1
        ;;
    esac

    chmod 600 /etc/ipsec.d/partners/$partner_name.cfg

    echo "Done. Stored at /etc/ipsec.d/partners/$partner_name.cfg"

    ipsec_configure_partner $partner_name
}

#
# test partner link
#
#unset ipsec_test_partner
function ipsec_test_partner() {
    partner_name=$1

    if [ -z "$partner_name" ]; then
        me=$(basename "$0")
        echo "Usage: $me parner_name"
        return 1
    fi

    # prepare retuen variables
    test_ipsec_active_partner=unknown
    test_ipsec_active_tunnel=unknown
    test_ipsec_icmp_test=unknown
    test_ipsec_tcp_test=unknown

    test_ipsec_active_partner=$partner_name

    clear_variables

    echo '============================'
    echo ' Detecting configuration'
    echo '============================'
    # read partner & tunnel cfg
    prepare_tunnel_cfg $partner_name
    if [ $? -gt 0 ]; then
        return 1
    fi

    echo '============================'
    echo ' Active tunnel detection'
    echo '============================'

    #
    # TODO This detectin uses link IP only. Add TCP based detection.
    #

    netstat -nr | grep $ipsec_tunnel1_rightvti_address >/dev/null
    if [ $? -eq 0 ]; then
        echo Tunnel 1 active.
        tunnel_active=1
    else
        netstat -nr | grep $ipsec_tunnel2_rightvti_address >/dev/null
        if [ $? -eq 0 ]; then
            echo Tunnel 2 active.
            tunnel_active=2
        else
            echo "Tunnel down or no routing."
            tunnel_active=0
        fi
    fi

    test_ipsec_active_tunnel=$tunnel_active

    echo '============================'
    echo ' ICMP test'
    echo '============================'
    test_ipsec_icmp_test=OK
    if [ $tunnel_active -eq 1 ]; then
        timeout 10 ping -c2 $ipsec_tunnel1_rightvti_address
        if [ $? -eq 124 ]; then
            echo "Error. Routing found but link vti not responded."
            test_ipsec_icmp_test=ERROR
        fi
    else
        if [ $tunnel_active -eq 2 ]; then
            timeout 10 ping -c2 $ipsec_tunnel2_rightvti_address
            if [ $? -eq 124 ]; then
                echo "Error. Routing found but link vti not responded."
                test_ipsec_icmp_test=ERROR
            fi
        else
            echo "Skipped as no active tunnel detected."
            test_ipsec_icmp_test=SKIPPED
        fi
    fi

    echo '============================'
    echo ' TCP test'
    echo '============================'
    test_ipsec_tcp_test=OK
    if [ $tunnel_active -gt 0 ]; then
        if [ ! -z "$ipsec_rightsubnet_knowntcp" ]; then
            tcp_ip=$(echo $ipsec_rightsubnet_knowntcp | cut -d':' -f1)
            tcp_port=$(echo $ipsec_rightsubnet_knowntcp | cut -d':' -f2)
            timeout 5 nc -zv $tcp_ip $tcp_port
            if [ $? -eq 124 ]; then
                echo "Error. Routing found but service not responded."
                test_ipsec_tcp_test=ERROR
            fi

        else
            echo "TCP service not defined for partner."
            echo "Specify ipsec_rightsubnet_knowntcp as IP:PORT in /etc/ipsec.d/partners/$partner_name.cfg"
            test_ipsec_tcp_test=NOT_CONFIGURED
        fi
    else
        echo "Skipped as no active tunnel detected."
        test_ipsec_tcp_test=SKIPPED
    fi

    clear_variables
}

#
# install
#
#unset register_ipsec_partner
function register_ipsec_partner() {
    cat /etc/bashrc | grep '^# ipsec-partner start' >/dev/null
    if [ $? -ne 0 ]; then

        cat >>/etc/bashrc <<EOF

# ipsec-partner start
#
if [ \$(whoami) = 'root' ]; then
   chmod 555 /usr/sbin/ipsec-partner
   . /usr/sbin/ipsec-partner
   echo Root can call ipsec-partner functions directly.
else
   echo Invoke ipsec-partner function via sudo. 
   echo sudo ipsec-partner ipsec_test_partner LinkA
fi
#
# ipsec-partner stop
EOF
        echo "ipsec-partner Registered."
    else
        echo "ipsec-partner already registered."
    fi
}

#
# Install 
#
#unset ipsec_partner_install
function ipsec_partner_install() {

    # in case of error continue
    set +e

    #
    #
    #
    what="libreswan install procedue"
    change_label1="added by >>$what<<"
    change_label2="by $(whoami) on $(date)"

    #
    # prepare paramters
    #

    # determine primary local network adapter
    if [ -z "$if_local" ]; then
        if_local=$(ip link | grep -v link | grep -v LOOPBACK | head -1 | tr -d ' ' | cut -f2 -d':')
        echo "Determined primary local interface: $if_local"
    fi
    if [ -z "$if_local" ]; then
        echo "Error. Cannot determine primary network interface. Specify name as parameter."
        exit 1
    fi

    [ -z "$ipsec_zone" ] && ipsec_zone="ipsec_tunnel"
    [ -z "$install_home" ] && install_home="."

    #
    # helper functions
    #
    function backup_file() {
        file=$1

        cp $file $file.$(date +"%Y%m%d_%H%M%S")
    }

    #
    # install packages
    #
    yum -y install libreswan firewalld nc iftop
    echo "Required software installed."

    #
    # configure kernel
    #
    echo -n "Configuring kernel..."
    grep "$change_label1" /etc/sysctl.conf >/dev/null
    if [ $? -eq 0 ]; then
        echo "Skipped. Change already done."
    else
        cat >>/etc/sysctl.conf <<EOF
#
# START $change_label1 $change_label2
#
net.ipv4.ip_forward = 1
net.ipv4.conf.default.rp_filter = 0
net.ipv4.conf.all.rp_filter = 0
net.ipv4.conf.$if_local.rp_filter = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
#
# STOP $change_label1 $change_label2
#
EOF
        sysctl -p
        echo "OK"
    fi

    #
    # Configure services
    #
    systemctl start ipsec
    systemctl start firewalld
    echo "Services started."

    systemctl enable ipsec
    systemctl enable firewalld
    echo "Services configured to start at boot."

    #
    # configure firewalld
    #
    err=0
    firewall-cmd --zone=internal --add-interface=$if_local --permanent || ((err = err + 1))

    firewall-cmd --new-zone=$ipsec_zone --permanent
    firewall-cmd --zone=$ipsec_zone --add-service="ipsec" --permanent

    #TODO fix hard coded if name
    firewall-cmd --direct --permanent --add-rule ipv4 filter FORWARD 0 -i ens3 -p tcp --dport 22 -j ACCEPT || ((err = err + 1))
    firewall-cmd --direct --permanent --add-rule ipv4 filter FORWARD 0 -o ens3 -p tcp --sport 22 -j ACCEPT || ((err = err + 1))
    firewall-cmd --reload || ((err = err + 1))
    if [ $err -gt 0 ]; then
        echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        echo "Warning: Firewall configured with errors."
        echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    else
        echo "Firewall configured."
    fi

    echo "Status of firewall service."
    firewall-cmd --state
    firewall-cmd --get-active-zones

    echo "Status of ipsec service."
    ipsec verify

    #
    # Install ipsec-partner
    #
    echo -n "Add ipsec-partner to /usr/sbin..."
    [ -f /usr/sbin/ipsec-partner ] && rm -f /usr/sbin/ipsec-partner
    cp $install_home/ipsec-partner /usr/sbin/ipsec-partner
    chmod +x /usr/sbin/ipsec-partner
    echo "OK"

    echo -n "Register ipsec-partner..."
    source /usr/sbin/ipsec-partner >/dev/null
    echo "OK"

    echo "Configure ipsec-partner..."
    ipsec_configure

    echo "Configure monitoring..."
    . monitoring/ipsec-partner-monitoring-install.sh

    #
    # Done.
    #
    echo "===================================="
    echo "Host configuration completed."
    echo
    echo "Execute configure_partner to configure tunnel."

}

#
# main()
#
function main() {
    if [ -f /usr/sbin/ipsec-partner ]; then
       functions=$(cat /usr/sbin/ipsec-partner | grep '^function' | sed 's/function //; s/() {//' | tr '\n' ', ' | sed 's/,main,/./')
       echo "ipsec-partner is now available with following fuctions: $functions"
    else
       echo "ipsec-partner is not available in /usr/sbin. Use install mode: sudo ./ipsec-partner ipsec-partner-install"
    fi
}

if [ -z "$1" ]; then
    main
else
    cmd=$1
    shift
    params=$@

    $cmd $params
fi
